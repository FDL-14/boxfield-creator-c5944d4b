
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tsjdsbxgottssqqlzfxl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRzamRzYnhnb3R0c3NxcWx6ZnhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1ODM3NDgsImV4cCI6MjA2MDE1OTc0OH0.3WVd3cIBxyUlJGBjCzwLs5YY14xC6ZNtMbb5zuxF0EY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    flowType: 'pkce'
  }
});

// Add type conversion helpers to handle metadata and additional properties
export const processUserProfile = (profile: any) => {
  if (!profile) return null;
  
  // Process both raw_user_meta_data and user_metadata for compatibility
  const metadata = profile.raw_user_meta_data || profile.user_metadata || {};
  
  // Special case: if the CPF is 80243088191, this is the master user who should have all permissions
  const isMasterCPF = profile.cpf === '802.430.881-91' || profile.cpf === '80243088191';
  
  // Make sure we have is_admin and is_master properties
  // Check both direct properties (from database columns) and metadata
  const is_admin = isMasterCPF ? true : 
    (profile.is_admin === true || metadata.is_admin === true);

  const is_master = isMasterCPF ? true : 
    (profile.is_master === true || metadata.is_master === true);
  
  // Process permissions to ensure they have all the required properties
  let processedPermissions = profile.permissions?.map((permission: any) => {
    // If this is the master user, give all permissions
    if (isMasterCPF || is_master) {
      return {
        ...permission,
        can_create_user: true,
        can_edit_user: true,
        can_edit_user_status: true,
        can_set_user_permissions: true,
        can_create_section: true,
        can_edit_section: true,
        can_delete_section: true,
        can_create_field: true,
        can_edit_field: true,
        can_delete_field: true,
        can_fill_field: true,
        can_sign: true,
        can_insert_logo: true,
        can_insert_photo: true,
        can_save: true,
        can_save_as: true,
        can_download: true,
        can_open: true,
        can_print: true,
        can_edit_document: true,
        can_cancel_document: true,
        can_view: true,
        can_edit_document_type: true
      };
    }
    
    return {
      ...permission,
      // Add missing permission properties used in the app
      can_create_user: permission.can_create_user || false,
      can_edit_user: permission.can_edit_user || false,
      can_edit_user_status: permission.can_edit_user_status || false,
      can_set_user_permissions: permission.can_set_user_permissions || false,
      can_create_section: permission.can_create_section || false,
      can_edit_section: permission.can_edit_section || false,
      can_delete_section: permission.can_delete_section || false,
      can_create_field: permission.can_create_field || false,
      can_edit_field: permission.can_edit_field || false,
      can_delete_field: permission.can_delete_field || false,
      can_fill_field: permission.can_fill_field || false,
      can_sign: permission.can_sign || false,
      can_insert_logo: permission.can_insert_logo || false,
      can_insert_photo: permission.can_insert_photo || false,
      can_save: permission.can_save || false,
      can_save_as: permission.can_save_as || false,
      can_download: permission.can_download || false,
      can_open: permission.can_open || false,
      can_print: permission.can_print || false,
      can_edit_document: permission.can_edit_document || false,
      can_cancel_document: permission.can_cancel_document || false,
      can_view: permission.can_view || false,
      can_edit_document_type: permission.can_edit_document_type || false
    };
  }) || [];
  
  // If this is the master user but no permissions exist yet, create default permissions with all privileges
  if ((isMasterCPF || is_master) && (!processedPermissions || processedPermissions.length === 0)) {
    processedPermissions = [{
      id: 'default-master-permissions',
      user_id: profile.id,
      can_create_user: true,
      can_edit_user: true,
      can_edit_user_status: true,
      can_set_user_permissions: true,
      can_create_section: true,
      can_edit_section: true,
      can_delete_section: true,
      can_create_field: true,
      can_edit_field: true,
      can_delete_field: true,
      can_fill_field: true,
      can_sign: true,
      can_insert_logo: true,
      can_insert_photo: true,
      can_save: true,
      can_save_as: true,
      can_download: true,
      can_open: true,
      can_print: true,
      can_edit_document: true,
      can_cancel_document: true,
      can_view: true,
      can_edit_document_type: true
    }];
  }
  
  return {
    ...profile,
    // Ensure these properties exist
    is_admin: is_admin,
    is_master: is_master,
    // Replace permissions with processed permissions
    permissions: processedPermissions || []
  };
};

// Helper function to format CPF by removing non-digits
export const cleanCPF = (cpf: string) => cpf.replace(/\D/g, '');
